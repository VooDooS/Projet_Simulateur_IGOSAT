/*! \mainpage Simulateur IGOSat
 
 \section intro_sec Introduction
 Dévelloppé dans le cadre d'un projet de master, ce programme pose les bases d'un simulateur de système complexe écrit en C++, basé sur des modules abstraits synchronisés via une horloge.
 
 \section general Principe général de la simulation
 L'idée du simulateur est de représenter le satellite comme un ensemble de modules ordonnés hiérarchiquement. Trois briques de base sont disponible: les \ref docMacroModule "modules", les macromodules et les modules physique.
 Les modules sont des éléments finaux, qui n'en contiennent pas d'autres. Les macromodules sont des modules qui peuvent contenir d'autres modules et des connexions entre ces modules. Enfin les modules physiques sont un peu à part, il serviront à modéliser, et à synchroniser avec les modules du satellite, les différents phénomènes physiques impliqués dans la simulation.

 Des modules connectés au sein d'un macromodules peuvent communiquer entre-eux en s'envoyant des messages. Il est nécessaire de définir pour chaque module la liste des messages qu'ils est capable de comprendre ainsi que les traitements associés à la réception de chacun de ces messages.

 Tous ces modules agissent de façon synchrone. Une classe Timer se charge d'appeller la méthode Module::clock de chaque module à chaque pas de temps. Tous les modules sont automatiquement inscris dans le timer lors de leur construction.
 Il est également possible de désynchroniser certains modules, afin qu'ils tournent à une fréquence plus ou moins élevée.

 Les modules peuvent êtres en partie configurés via les \ref xmlRef "fichiers xml" qui leur sont associés, cependant cette foncitonnalité n'est pas encore complète, et le générateur associé ne peut pour le moment éditer un XML déjà créé.
 
 \section struc Structure du dépôt

     IGOgen                         Générateur de code
     IGOsim                         Simulateur
        | config                    Fichiers de configuration XML
        | doc                       Documentation générée par Doxygen
        | src                       Sources du simulateur
            | Core                  Sources génériques du simulateur
            | Satellite             Sources spécifiques à IGOsat
        | doxy.conf                 Fichier de configuration de Doxygen
     ProjetM1                       Divers pour suivi du projet
     UML                            Modélisation du simulateur
     README.md                      Readme basique, affiché sur accueil du dépôt
     CHANGELOG.md                   Changelog


 \section install_sec Installation
 \subsection tools_subsec Récupération des sources
 La méthode la plus simple pour récupérer les sources du projet est de cloner le dépôt depuis GitHub:
 
     git clone https://github.com/VooDooS/Projet_Simulateur_IGOSAT.git
 
 \subsection tools_cofig Configuration
 Par défaut, le simulateur va aller chercher des fichiers de configuration dans le dossier *config/*, si ce n'est pas votre cas, pensez à modifier la ligne correspondante dans IGOSim.cpp, avant de compiler.
 Un / doit impérativement conclure le lien.
 
     XMLReader::setPath("Path/to/config/");
 
 \subsection tools_compil Compilation des sources
 Un makefile est fourni, pour compiler, placez vous dans le dossier src, et écecutez la commande Make:
 
      cd IGOSim/src/
      make

\section particip Comment participer ?
Si vous n'êtes pas un collaborateur du projet sur Github il vous faut créer une bifurcation (un fork) du dépôt sur votre propre compte. Il vous est ensuite possible de nous proposer vos modifications via une demande d'ajout (pull request).

Sinon, pensez à créer une branche pour effectuer vos modifications en toute sécurité, et de demander une vérification commune via une demande d'ajout. 
Ce processus à l'avantage de permettre à tous d'être tenus au courant de l'évolution du code.

Il est de plus fortement conseillé de tenir à jour le document "CHANGELOG.md", notamment lorsque les modifications concernent la partie Core du code. 
 **/