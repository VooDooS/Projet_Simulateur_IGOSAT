/*! \page Référence Création Module

# Creation d'un nouveau classe #

Pour créer un nouveau module, il faut hériter un nouveau classe de classe Module qui va représenter votre nouveau module. 
Exemple de création de Module **BatteryController**

`class BatteryController:public Module{};`

Il faut au moins redéfinir deux methodes
- Constructeur(Params = Params())
Declarez le constructeur de votre module dans le fichier ModuleName.h
Le constructeur d'un nouveau module doit utiliser le constructeur de base de classe Module:
`BatteryController::BatteryController(Params params) : Module("BatteryController", params, "BatteryModule/BatteryController.xml"){
	/* ce qu'il faut faire pendant la création d'un module */
}`
Dans cet constructeur de base:
+BatteryController – nom de votre module. Pour simplification 
+params – un objet de type `std::unordered_map<std::string, double>` avec des parametrès d'un module
+"BatteryModule/BatteryController.xml" – le chemin vers un fichier `.xml` qui contient la descripton des parametres d'un module et la description des messages qui peuvent être traités par ce module. 

– process(std::shared_ptr<Message>)

C'est une méthode qui traite des messages qui peuvent être traités par ce module. La sélection d'un message peut être réalisé par déclaration `if` qui verifié le nom d'un message en utilisant la methode `getName()` d'un objet Message. Par exemple, le traitement des messages "getStatus" et "actualVoltage" de Module "BatteryController" peut être implementé d'une telle manière: 

`
void BatteryController::process(std::shared_ptr<Message> m){
    if (m->getName() == "getStatus") {
    	//ce qu'il faut faire au reçu d'un message "getStatus"
    }

    if (m->getName() == "actualVoltage") {
       	//ce qu'il faut faire au reçu d'un message "actualVoltage"
    }
}
`

# Propriétés d'un Module #

## Mémoire ##
En train de reflichir...
## Paramètres ##

## Sockets ##

## Messages ##

## Traitement des tâches ##

*/